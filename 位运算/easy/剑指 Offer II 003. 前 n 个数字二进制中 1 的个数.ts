// 给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。

//  

// 示例 1:

// 输入: n = 2
// 输出: [0,1,1]
// 解释: 
// 0 --> 0
// 1 --> 1
// 2 --> 10
// 示例 2:

// 输入: n = 5
// 输出: [0,1,1,2,1,2]
// 解释:
// 0 --> 0
// 1 --> 1
// 2 --> 10
// 3 --> 11
// 4 --> 100
// 5 --> 101
function countBits(n: number): number[] {
  // 需要将0统计进去
  let result = new Array(n + 1).fill(0)

  for (let i = 0; i <= n; i++) {
    // 偶数，与他的一半(i/2，也就是i往右移动一位)有一样个数的1
    // 4=> 100（有一个1），4/2 = 2 => ( 2 => 10 ) 也是一个1
    if (i % 2 === 0) {
      result[i] = result[i >> 1]
    } else {
      // 奇数，想当于与他的一半(也就是i往右移动一位)再加上1
      // 5=> 101（有2个1），5 >> 1 右移一位101变成了10，也就是2
      // 5 等于2往左移动一位+1, 100 + 1，所以相当于2的二进制数中1的个数再加1
      result[i] = result[i >> 1] + 1
    }
  }
  return result
};